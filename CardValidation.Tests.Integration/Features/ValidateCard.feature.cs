// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CardValidation.Tests.Integration.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ValidateCardFeature : object, Xunit.IClassFixture<ValidateCardFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ValidateCard", "\tThe api should validate a credit card and return an error or a payment system co" +
                "de", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ValidateCard.feature"
#line hidden
        
        public ValidateCardFeature(ValidateCardFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
#line 5
 await testRunner.GivenAsync("validation endpoint is used", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Credit card is valid thru current month", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Credit card is valid thru current month")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        public async System.Threading.Tasks.Task CreditCardIsValidThruCurrentMonth()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore",
                    "card_validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Credit card is valid thru current month", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 10
 await testRunner.WhenAsync("I post credit card details with \"John Doe\", \"4242424242424242\", \"<currentMonth>\"," +
                        " \"111\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 12
 await testRunner.AndAsync("the payment system should be \"VISA\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="All credit card data is valid for testing data")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "All credit card data is valid for testing data")]
        [Xunit.TraitAttribute("Category", "smoke")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        public async System.Threading.Tasks.Task AllCreditCardDataIsValidForTestingData()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "card_validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("All credit card data is valid for testing data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 19
 await testRunner.WhenAsync("I post credit card details with \"John Doe\", \"4242424242424242\", \"<validDate>\", \"1" +
                        "11\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 21
 await testRunner.AndAsync("the payment system should be \"VISA\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="All credit card data is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "All credit card data is valid")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "111", "VISA", new string[0])]
        [Xunit.InlineDataAttribute("Amy", "4012888888881881", "<validDate>", "3214", "VISA", new string[0])]
        [Xunit.InlineDataAttribute("Some Body", "371449635398431", "<validDate>", "942", "AMERICAN_EXPRESS", new string[0])]
        [Xunit.InlineDataAttribute("Mark Bob Third", "5105105105105100", "<validDate>", "264", "MASTERCARD", new string[0])]
        [Xunit.InlineDataAttribute("Tester", "2221000000000009", "<validDate>", "451", "MASTERCARD", new string[0])]
        public async System.Threading.Tasks.Task AllCreditCardDataIsValid(string owner, string number, string date, string cvv, string payment_System, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            argumentsOfScenario.Add("payment_system", payment_System);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("All credit card data is valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 26
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
 await testRunner.AndAsync(string.Format("the payment system should be \"{0}\"", payment_System), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Correct owner name")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Correct owner name")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("John Doe Third", "4242424242424242", "<validDate>", "111", new string[0])]
        [Xunit.InlineDataAttribute("JoHn DoE", "4242424242424242", "<validDate>", "111", new string[0])]
        [Xunit.InlineDataAttribute("John", "4242424242424242", "<validDate>", "111", new string[0])]
        [Xunit.InlineDataAttribute("jOHN dOE", "4242424242424242", "<validDate>", "111", new string[0])]
        public async System.Threading.Tasks.Task CorrectOwnerName(string owner, string number, string date, string cvv, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Correct owner name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 41
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 43
 await testRunner.AndAsync("the payment system should be \"VISA\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Wrong owner name")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Wrong owner name")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("numberinname1", "4242424242424242", "<validDate>", "111", new string[0])]
        [Xunit.InlineDataAttribute("Many   Spaces", "4242424242424242", "<validDate>", "111", new string[0])]
        [Xunit.InlineDataAttribute("Some Very Long name", "4242424242424242", "<validDate>", "111", new string[0])]
        [Xunit.InlineDataAttribute("Not Allowed S_mbols", "4242424242424242", "<validDate>", "111", new string[0])]
        public async System.Threading.Tasks.Task WrongOwnerName(string owner, string number, string date, string cvv, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Wrong owner name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 55
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 56
 await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 57
 await testRunner.AndAsync("there there should be 1 error in the answer", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
 await testRunner.AndAsync("error should have \"Owner\" and \"Wrong owner\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Correct card number")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Correct card number")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("John Doe", "4000056655665556", "<validDate>", "111", "VISA", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "5555555555554444", "<validDate>", "111", "MASTERCARD", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "2223003122003222", "<validDate>", "111", "MASTERCARD", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "5105105105105100", "<validDate>", "111", "MASTERCARD", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "378282246310005", "<validDate>", "111", "AMERICAN_EXPRESS", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "371449635398431", "<validDate>", "111", "AMERICAN_EXPRESS", new string[0])]
        public async System.Threading.Tasks.Task CorrectCardNumber(string owner, string number, string date, string cvv, string payment_System, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            argumentsOfScenario.Add("payment_system", payment_System);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Correct card number", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 71
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 72
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 73
 await testRunner.AndAsync(string.Format("the payment system should be \"{0}\"", payment_System), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Wrong card numnber")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Wrong card numnber")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("John Doe", "hello", "<validDate>", "111", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "1", "<validDate>", "111", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242 4242 4242 4242", "<validDate>", "111", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242-4242-4242-4242", "<validDate>", "111", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "42424242424242424242424242424242", "<validDate>", "111", new string[0])]
        public async System.Threading.Tasks.Task WrongCardNumnber(string owner, string number, string date, string cvv, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Wrong card numnber", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 85
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 86
 await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 87
 await testRunner.AndAsync("there there should be 1 error in the answer", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 88
 await testRunner.AndAsync("error should have \"Number\" and \"Wrong number\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Correct date format")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Correct date format")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "111", "MM\'/\'yyyy", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "111", "MM\'/\'yy", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "111", "MMyyyy", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "111", "MMyy", new string[0])]
        public async System.Threading.Tasks.Task CorrectDateFormat(string owner, string number, string date, string cvv, string date_Format, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            argumentsOfScenario.Add("date_format", date_Format);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Correct date format", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 100
 await testRunner.GivenAsync(string.Format("the date format \"{0}\" is used", date_Format), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 101
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 102
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 103
 await testRunner.AndAsync("the payment system should be \"VISA\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Wrong date format")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Wrong date format")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "123", "111", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "11-11-2021", "111", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "3023", "111", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "302024", "111", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "2A/2025", "111", new string[0])]
        public async System.Threading.Tasks.Task WrongDateFormat(string owner, string number, string date, string cvv, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Wrong date format", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 114
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 115
 await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 116
 await testRunner.AndAsync("there there should be 1 error in the answer", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 117
 await testRunner.AndAsync("error should have \"Date\" and \"Wrong date\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Past date")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Past date")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        public async System.Threading.Tasks.Task PastDate()
        {
            string[] tagsOfScenario = new string[] {
                    "card_validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Past date", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 129
 await testRunner.WhenAsync("I post credit card details with \"John Doe\", \"4123456789012\", \"<pastDate>\", \"111\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 130
 await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 131
 await testRunner.AndAsync("there there should be 1 error in the answer", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 132
 await testRunner.AndAsync("error should have \"Date\" and \"Wrong date\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Correct CVV")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Correct CVV")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "123", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "1234", new string[0])]
        public async System.Threading.Tasks.Task CorrectCVV(string owner, string number, string date, string cvv, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Correct CVV", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 137
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 138
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 139
 await testRunner.AndAsync("the payment system should be \"VISA\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Wrong CVV")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Wrong CVV")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "1", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "50505", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "1A", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "11!", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "11 1", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "_", new string[0])]
        public async System.Threading.Tasks.Task WrongCVV(string owner, string number, string date, string cvv, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Wrong CVV", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 147
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 148
 await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 149
 await testRunner.AndAsync("there there should be 1 error in the answer", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 150
 await testRunner.AndAsync("error should have \"Cvv\" and \"Wrong cvv\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="One field is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "One field is missing")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("", "4242424242424242", "<validDate>", "111", "Owner", "Owner is required", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "", "<validDate>", "111", "Number", "Number is required", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "", "111", "Date", "Date is required", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "4242424242424242", "<validDate>", "", "Cvv", "Cvv is required", new string[0])]
        public async System.Threading.Tasks.Task OneFieldIsMissing(string owner, string number, string date, string cvv, string error_Key, string error_Value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            argumentsOfScenario.Add("error_key", error_Key);
            argumentsOfScenario.Add("error_value", error_Value);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("One field is missing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 161
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 162
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 163
 await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 164
 await testRunner.AndAsync("there there should be 1 error in the answer", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 165
 await testRunner.AndAsync(string.Format("error should have \"{0}\" and \"{1}\"", error_Key, error_Value), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Multiple fields are missing")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Multiple fields are missing")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("", "4242424242424242", "<validDate>", "", "TC01", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "", "", "111", "TC02", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "", "", "", "TC03", new string[0])]
        [Xunit.InlineDataAttribute("", "", "", "", "TC04", new string[0])]
        public async System.Threading.Tasks.Task MultipleFieldsAreMissing(string owner, string number, string date, string cvv, string test_Case, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            argumentsOfScenario.Add("test_case", test_Case);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Multiple fields are missing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 176
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 177
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 178
 await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Test Case",
                            "Owner",
                            "Number",
                            "Date",
                            "Cvv"});
                table1.AddRow(new string[] {
                            "TC01",
                            "Owner is required",
                            "",
                            "",
                            "Cvv is required"});
                table1.AddRow(new string[] {
                            "TC02",
                            "",
                            "Number is required",
                            "Date is required",
                            ""});
                table1.AddRow(new string[] {
                            "TC03",
                            "",
                            "Number is required",
                            "Date is required",
                            "Cvv is required"});
                table1.AddRow(new string[] {
                            "TC04",
                            "Owner is required",
                            "Number is required",
                            "Date is required",
                            "Cvv is required"});
#line 179
 await testRunner.AndAsync(string.Format("test errors for \"{0}\" are as follows:", test_Case), ((string)(null)), table1, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Multiple invalid fields")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Multiple invalid fields")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("John Do3", "4242424242424242", "<pastDate>", "111", "TC01", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "11", "<pastDate>", "111", "TC02", new string[0])]
        [Xunit.InlineDataAttribute("John_Doe", "4242-4242-4242-4242", "<validDate>", "11!", "TC03", new string[0])]
        [Xunit.InlineDataAttribute("J0hn Doe", "4242 4242 4242 4242", "<pastDate>", "2", "TC04", new string[0])]
        public async System.Threading.Tasks.Task MultipleInvalidFields(string owner, string number, string date, string cvv, string test_Case, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            argumentsOfScenario.Add("test_case", test_Case);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Multiple invalid fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 194
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 195
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 196
 await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Test Case",
                            "Owner",
                            "Number",
                            "Date",
                            "Cvv"});
                table2.AddRow(new string[] {
                            "TC01",
                            "Wrong owner",
                            "",
                            "Wrong date",
                            ""});
                table2.AddRow(new string[] {
                            "TC02",
                            "",
                            "Wrong number",
                            "Wrong date",
                            ""});
                table2.AddRow(new string[] {
                            "TC03",
                            "Wrong owner",
                            "Wrong number",
                            "",
                            "Wrong cvv"});
                table2.AddRow(new string[] {
                            "TC04",
                            "Wrong owner",
                            "Wrong number",
                            "Wrong date",
                            "Wrong cvv"});
#line 197
 await testRunner.AndAsync(string.Format("test errors for \"{0}\" are as follows:", test_Case), ((string)(null)), table2, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Combination of missing and invalid fields")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Combination of missing and invalid fields")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        [Xunit.InlineDataAttribute("", "4242424242424242", "<pastDate>", "111", "TC01", new string[0])]
        [Xunit.InlineDataAttribute("John Doe", "", "<pastDate>", "cvv", "TC02", new string[0])]
        [Xunit.InlineDataAttribute("John_Doe", "4242-4242-4242-4242", "", "", "TC03", new string[0])]
        public async System.Threading.Tasks.Task CombinationOfMissingAndInvalidFields(string owner, string number, string date, string cvv, string test_Case, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "card_validation"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            argumentsOfScenario.Add("test_case", test_Case);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Combination of missing and invalid fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 214
 await testRunner.WhenAsync(string.Format("I post credit card details with \"{0}\", \"{1}\", \"{2}\", \"{3}\"", owner, number, date, cvv), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 215
 await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Test Case",
                            "Owner",
                            "Number",
                            "Date",
                            "Cvv"});
                table3.AddRow(new string[] {
                            "TC01",
                            "Owner is required",
                            "",
                            "Wrong date",
                            ""});
                table3.AddRow(new string[] {
                            "TC02",
                            "",
                            "Number is required",
                            "Wrong date",
                            "Wrong cvv"});
                table3.AddRow(new string[] {
                            "TC03",
                            "Wrong owner",
                            "Wrong number",
                            "Date is required",
                            "Cvv is required"});
#line 216
 await testRunner.AndAsync(string.Format("test errors for \"{0}\" are as follows:", test_Case), ((string)(null)), table3, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Passing empty message")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Passing empty message")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        public async System.Threading.Tasks.Task PassingEmptyMessage()
        {
            string[] tagsOfScenario = new string[] {
                    "card_validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Passing empty message", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 230
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 231
 await testRunner.WhenAsync("I post empty message", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 232
 await testRunner.ThenAsync("the response status should be 415", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Passing empty json")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Passing empty json")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        public async System.Threading.Tasks.Task PassingEmptyJson()
        {
            string[] tagsOfScenario = new string[] {
                    "card_validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Passing empty json", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 236
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 237
 await testRunner.WhenAsync("I post card with payload:", "{}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 241
 await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 242
 await testRunner.AndAsync("there there should be 4 errors in the answer", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Passing json with missing field")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateCard")]
        [Xunit.TraitAttribute("Description", "Passing json with missing field")]
        [Xunit.TraitAttribute("Category", "card_validation")]
        public async System.Threading.Tasks.Task PassingJsonWithMissingField()
        {
            string[] tagsOfScenario = new string[] {
                    "card_validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Passing json with missing field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 245
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 246
 await testRunner.WhenAsync("I post card with payload:", "{\r\n\t\"Owner\": \"John Doe\",\r\n\t\"Number\": \"4242424242424242\",\r\n\t\"Cvv\": \"111\"\r\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 254
 await testRunner.ThenAsync("the response status should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 255
 await testRunner.AndAsync("there there should be 1 error in the answer", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 256
 await testRunner.AndAsync("error should have \"Date\" and \"Date is required\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ValidateCardFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ValidateCardFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
