
name: CI Pipeline

on:
  push:
    branches: [ main, test ]
  pull_request:
    branches: [ main, test ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore CardValidation.sln
    
    - name: Build solution
      run: dotnet build CardValidation.sln --configuration Release --no-restore
    
    - name: Run tests
      run: |
        dotnet test CardValidation.sln \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory TestResults \
          --collect:"XPlat Code Coverage"
      env:
        ASPNETCORE_ENVIRONMENT: Testing
    
    - name: Install Allure CLI
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq openjdk-11-jre-headless
        wget -q -O allure.tgz https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
        tar -xzf allure.tgz
        sudo mv allure-2.24.0 /opt/allure
        sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
        allure --version
    
    - name: Generate Allure report
      run: |
        cd CardValidation.Tests
        if [ -d "allure-results" ] && [ "$(find allure-results -name "*.json" | wc -l)" -gt 0 ]; then
          allure generate allure-results --clean -o ../TestResults/allure-report --single-file
          echo "Allure report generated successfully"
        else
          echo "No Allure results found - skipping report generation"
          mkdir -p ../TestResults/allure-report
          echo "<h1>No Allure Results Found</h1><p>Tests ran but no Allure data was generated.</p>" > ../TestResults/allure-report/index.html
        fi
    
    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        
        if find TestResults -name "coverage.cobertura.xml" -type f | grep -q .; then
          reportgenerator \
            -reports:"TestResults/**/coverage.cobertura.xml" \
            -targetdir:"TestResults/coverage-report" \
            -reporttypes:"Html;JsonSummary" \
            -verbosity:Warning
          echo "Coverage report generated successfully"
          
          if [ -f "TestResults/coverage-report/Summary.json" ]; then
            echo "Coverage Summary:"
            cat TestResults/coverage-report/Summary.json
          fi
        else
          echo "No coverage files found"
        fi
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-and-reports
        path: |
          TestResults/allure-report/
          TestResults/coverage-report/
        retention-days: 30
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: TestResults
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      run: |
        docker build -t najiya123/cardvalidation-app:latest -t najiya123/cardvalidation-app:${{ github.sha }} .
        docker push najiya123/cardvalidation-app:latest
        docker push najiya123/cardvalidation-app:${{ github.sha }}
